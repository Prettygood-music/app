/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./types/database";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAlbumGenresRowSchemaSchema = z.object({
  album_id: z.string(),
  genre_id: z.string(),
});

export const publicAlbumGenresInsertSchemaSchema = z.object({
  album_id: z.string(),
  genre_id: z.string(),
});

export const publicAlbumGenresUpdateSchemaSchema = z.object({
  album_id: z.string().optional(),
  genre_id: z.string().optional(),
});

export const publicAlbumGenresRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("album_genres_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("album_genres_genre_id_fkey"),
    columns: z.tuple([z.literal("genre_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("genres"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicAlbumLikesRowSchemaSchema = z.object({
  album_id: z.string(),
  liked_at: z.string(),
  user_id: z.string(),
});

export const publicAlbumLikesInsertSchemaSchema = z.object({
  album_id: z.string(),
  liked_at: z.string().optional(),
  user_id: z.string(),
});

export const publicAlbumLikesUpdateSchemaSchema = z.object({
  album_id: z.string().optional(),
  liked_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicAlbumLikesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("album_likes_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("album_likes_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicAlbumsRowSchemaSchema = z.object({
  artist_id: z.string(),
  cover_url: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  release_date: z.string().nullable(),
  title: z.string(),
  type: z.string().nullable(),
  updated_at: z.string(),
});

export const publicAlbumsInsertSchemaSchema = z.object({
  artist_id: z.string(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  release_date: z.string().optional().nullable(),
  title: z.string(),
  type: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicAlbumsUpdateSchemaSchema = z.object({
  artist_id: z.string().optional(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  release_date: z.string().optional().nullable(),
  title: z.string().optional(),
  type: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicAlbumsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("albums_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicArtistFollowersRowSchemaSchema = z.object({
  artist_id: z.string(),
  followed_at: z.string(),
  user_id: z.string(),
});

export const publicArtistFollowersInsertSchemaSchema = z.object({
  artist_id: z.string(),
  followed_at: z.string().optional(),
  user_id: z.string(),
});

export const publicArtistFollowersUpdateSchemaSchema = z.object({
  artist_id: z.string().optional(),
  followed_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicArtistFollowersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("artist_followers_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("artist_followers_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicArtistGenresRowSchemaSchema = z.object({
  artist_id: z.string(),
  genre_id: z.string(),
});

export const publicArtistGenresInsertSchemaSchema = z.object({
  artist_id: z.string(),
  genre_id: z.string(),
});

export const publicArtistGenresUpdateSchemaSchema = z.object({
  artist_id: z.string().optional(),
  genre_id: z.string().optional(),
});

export const publicArtistGenresRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("artist_genres_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("artist_genres_genre_id_fkey"),
    columns: z.tuple([z.literal("genre_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("genres"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicArtistsRowSchemaSchema = z.object({
  application_date: z.string().nullable(),
  application_notes: z.string().nullable(),
  approved: z.boolean().nullable(),
  artist_name: z.string(),
  bio: z.string().nullable(),
  created_at: z.string(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  location: z.string().nullable(),
  social_links: jsonSchema.nullable(),
  updated_at: z.string(),
  verified: z.boolean().nullable(),
  website: z.string().nullable(),
});

export const publicArtistsInsertSchemaSchema = z.object({
  application_date: z.string().optional().nullable(),
  application_notes: z.string().optional().nullable(),
  approved: z.boolean().optional().nullable(),
  artist_name: z.string(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string(),
  location: z.string().optional().nullable(),
  social_links: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
  verified: z.boolean().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const publicArtistsUpdateSchemaSchema = z.object({
  application_date: z.string().optional().nullable(),
  application_notes: z.string().optional().nullable(),
  approved: z.boolean().optional().nullable(),
  artist_name: z.string().optional(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  location: z.string().optional().nullable(),
  social_links: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
  verified: z.boolean().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const publicArtistsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("artists_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicGenresRowSchemaSchema = z.object({
  color: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  image_url: z.string().nullable(),
  name: z.string(),
  popularity: z.number().nullable(),
  slug: z.string().nullable(),
  updated_at: z.string(),
});

export const publicGenresInsertSchemaSchema = z.object({
  color: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string(),
  popularity: z.number().optional().nullable(),
  slug: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicGenresUpdateSchemaSchema = z.object({
  color: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string().optional(),
  popularity: z.number().optional().nullable(),
  slug: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicPaymentStatusHistoryRowSchemaSchema = z.object({
  changed_at: z.string(),
  changed_by: z.string(),
  id: z.string(),
  new_status: z.string(),
  notes: z.string().nullable(),
  old_status: z.string().nullable(),
  payment_id: z.string(),
});

export const publicPaymentStatusHistoryInsertSchemaSchema = z.object({
  changed_at: z.string().optional(),
  changed_by: z.string().optional(),
  id: z.string().optional(),
  new_status: z.string(),
  notes: z.string().optional().nullable(),
  old_status: z.string().optional().nullable(),
  payment_id: z.string(),
});

export const publicPaymentStatusHistoryUpdateSchemaSchema = z.object({
  changed_at: z.string().optional(),
  changed_by: z.string().optional(),
  id: z.string().optional(),
  new_status: z.string().optional(),
  notes: z.string().optional().nullable(),
  old_status: z.string().optional().nullable(),
  payment_id: z.string().optional(),
});

export const publicPaymentStatusHistoryRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("payment_status_history_payment_id_fkey"),
    columns: z.tuple([z.literal("payment_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("payments"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPaymentsRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  amount: z.number(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  message: z.string().nullable(),
  payment_type: z.string(),
  recipient_id: z.string(),
  sender_id: z.string(),
  status: z.string(),
  track_id: z.string().nullable(),
  transaction_hash: z.string().nullable(),
  updated_at: z.string(),
});

export const publicPaymentsInsertSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  amount: z.number(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  message: z.string().optional().nullable(),
  payment_type: z.string(),
  recipient_id: z.string(),
  sender_id: z.string(),
  status: z.string(),
  track_id: z.string().optional().nullable(),
  transaction_hash: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicPaymentsUpdateSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  amount: z.number().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  message: z.string().optional().nullable(),
  payment_type: z.string().optional(),
  recipient_id: z.string().optional(),
  sender_id: z.string().optional(),
  status: z.string().optional(),
  track_id: z.string().optional().nullable(),
  transaction_hash: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicPaymentsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("payments_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_recipient_id_fkey"),
    columns: z.tuple([z.literal("recipient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_sender_id_fkey"),
    columns: z.tuple([z.literal("sender_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlayHistoryRowSchemaSchema = z.object({
  client_ip: z.string().nullable(),
  completed: z.boolean().nullable(),
  context_id: z.string().nullable(),
  id: z.string(),
  play_duration: z.number().nullable(),
  played_at: z.string(),
  source: z.string().nullable(),
  track_id: z.string(),
  user_agent: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const publicPlayHistoryInsertSchemaSchema = z.object({
  client_ip: z.string().optional().nullable(),
  completed: z.boolean().optional().nullable(),
  context_id: z.string().optional().nullable(),
  id: z.string().optional(),
  play_duration: z.number().optional().nullable(),
  played_at: z.string().optional(),
  source: z.string().optional().nullable(),
  track_id: z.string(),
  user_agent: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicPlayHistoryUpdateSchemaSchema = z.object({
  client_ip: z.string().optional().nullable(),
  completed: z.boolean().optional().nullable(),
  context_id: z.string().optional().nullable(),
  id: z.string().optional(),
  play_duration: z.number().optional().nullable(),
  played_at: z.string().optional(),
  source: z.string().optional().nullable(),
  track_id: z.string().optional(),
  user_agent: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicPlayHistoryRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("play_history_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("play_history_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("play_history_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaylistLikesRowSchemaSchema = z.object({
  liked_at: z.string(),
  playlist_id: z.string(),
  user_id: z.string(),
});

export const publicPlaylistLikesInsertSchemaSchema = z.object({
  liked_at: z.string().optional(),
  playlist_id: z.string(),
  user_id: z.string(),
});

export const publicPlaylistLikesUpdateSchemaSchema = z.object({
  liked_at: z.string().optional(),
  playlist_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicPlaylistLikesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("playlist_likes_playlist_id_fkey"),
    columns: z.tuple([z.literal("playlist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("playlists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_likes_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaylistTracksRowSchemaSchema = z.object({
  added_at: z.string(),
  added_by: z.string(),
  playlist_id: z.string(),
  position: z.number(),
  track_id: z.string(),
});

export const publicPlaylistTracksInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  added_by: z.string(),
  playlist_id: z.string(),
  position: z.number(),
  track_id: z.string(),
});

export const publicPlaylistTracksUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  added_by: z.string().optional(),
  playlist_id: z.string().optional(),
  position: z.number().optional(),
  track_id: z.string().optional(),
});

export const publicPlaylistTracksRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("playlist_tracks_added_by_fkey"),
    columns: z.tuple([z.literal("added_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_tracks_playlist_id_fkey"),
    columns: z.tuple([z.literal("playlist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("playlists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_tracks_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_tracks_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaylistsRowSchemaSchema = z.object({
  cover_url: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const publicPlaylistsInsertSchemaSchema = z.object({
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  name: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const publicPlaylistsUpdateSchemaSchema = z.object({
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicPlaylistsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("playlists_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRelatedGenresRowSchemaSchema = z.object({
  genre_id: z.string(),
  related_genre_id: z.string(),
  weight: z.number().nullable(),
});

export const publicRelatedGenresInsertSchemaSchema = z.object({
  genre_id: z.string(),
  related_genre_id: z.string(),
  weight: z.number().optional().nullable(),
});

export const publicRelatedGenresUpdateSchemaSchema = z.object({
  genre_id: z.string().optional(),
  related_genre_id: z.string().optional(),
  weight: z.number().optional().nullable(),
});

export const publicRelatedGenresRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("related_genres_genre_id_fkey"),
    columns: z.tuple([z.literal("genre_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("genres"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("related_genres_related_genre_id_fkey"),
    columns: z.tuple([z.literal("related_genre_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("genres"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTrackGenresRowSchemaSchema = z.object({
  genre_id: z.string(),
  track_id: z.string(),
});

export const publicTrackGenresInsertSchemaSchema = z.object({
  genre_id: z.string(),
  track_id: z.string(),
});

export const publicTrackGenresUpdateSchemaSchema = z.object({
  genre_id: z.string().optional(),
  track_id: z.string().optional(),
});

export const publicTrackGenresRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("track_genres_genre_id_fkey"),
    columns: z.tuple([z.literal("genre_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("genres"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("track_genres_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("track_genres_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTrackLikesRowSchemaSchema = z.object({
  liked_at: z.string(),
  track_id: z.string(),
  user_id: z.string(),
});

export const publicTrackLikesInsertSchemaSchema = z.object({
  liked_at: z.string().optional(),
  track_id: z.string(),
  user_id: z.string(),
});

export const publicTrackLikesUpdateSchemaSchema = z.object({
  liked_at: z.string().optional(),
  track_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicTrackLikesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("track_likes_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("track_likes_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("track_likes_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTracksRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  artist_id: z.string(),
  audio_url: z.string(),
  cover_url: z.string().nullable(),
  created_at: z.string(),
  duration: z.number(),
  explicit: z.boolean().nullable(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  isrc: z.string().nullable(),
  lyrics: z.string().nullable(),
  release_date: z.string().nullable(),
  title: z.string(),
  track_number: z.number().nullable(),
  updated_at: z.string(),
});

export const publicTracksInsertSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  artist_id: z.string(),
  audio_url: z.string(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  duration: z.number(),
  explicit: z.boolean().optional().nullable(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  isrc: z.string().optional().nullable(),
  lyrics: z.string().optional().nullable(),
  release_date: z.string().optional().nullable(),
  title: z.string(),
  track_number: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicTracksUpdateSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  artist_id: z.string().optional(),
  audio_url: z.string().optional(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  duration: z.number().optional(),
  explicit: z.boolean().optional().nullable(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  isrc: z.string().optional().nullable(),
  lyrics: z.string().optional().nullable(),
  release_date: z.string().optional().nullable(),
  title: z.string().optional(),
  track_number: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publicTracksRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("tracks_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserLibraryAlbumsRowSchemaSchema = z.object({
  added_at: z.string(),
  album_id: z.string(),
  user_id: z.string(),
});

export const publicUserLibraryAlbumsInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  album_id: z.string(),
  user_id: z.string(),
});

export const publicUserLibraryAlbumsUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  album_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicUserLibraryAlbumsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_library_albums_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_library_albums_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserLibraryTracksRowSchemaSchema = z.object({
  added_at: z.string(),
  track_id: z.string(),
  user_id: z.string(),
});

export const publicUserLibraryTracksInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  track_id: z.string(),
  user_id: z.string(),
});

export const publicUserLibraryTracksUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  track_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicUserLibraryTracksRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_library_tracks_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_library_tracks_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_library_tracks_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserRecentlyPlayedRowSchemaSchema = z.object({
  context_id: z.string().nullable(),
  context_type: z.string().nullable(),
  id: z.string(),
  played_at: z.string(),
  track_id: z.string(),
  user_id: z.string(),
});

export const publicUserRecentlyPlayedInsertSchemaSchema = z.object({
  context_id: z.string().optional().nullable(),
  context_type: z.string().optional().nullable(),
  id: z.string().optional(),
  played_at: z.string().optional(),
  track_id: z.string(),
  user_id: z.string(),
});

export const publicUserRecentlyPlayedUpdateSchemaSchema = z.object({
  context_id: z.string().optional().nullable(),
  context_type: z.string().optional().nullable(),
  id: z.string().optional(),
  played_at: z.string().optional(),
  track_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicUserRecentlyPlayedRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_recently_played_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_recently_played_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_recently_played_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserSettingsRowSchemaSchema = z.object({
  audio_quality: z.string().nullable(),
  auto_add_to_library: z.boolean().nullable(),
  crossfade_duration: z.number().nullable(),
  enable_autoplay: z.boolean().nullable(),
  enable_crossfade: z.boolean().nullable(),
  enable_equalizer: z.boolean().nullable(),
  enable_explicit_content: z.boolean().nullable(),
  enable_gapless_playback: z.boolean().nullable(),
  enable_notifications: z.boolean().nullable(),
  equalizer_settings: jsonSchema.nullable(),
  notification_settings: jsonSchema.nullable(),
  preferred_language: z.string().nullable(),
  privacy_level: z.string().nullable(),
  theme: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string(),
  volume_level: z.number().nullable(),
});

export const publicUserSettingsInsertSchemaSchema = z.object({
  audio_quality: z.string().optional().nullable(),
  auto_add_to_library: z.boolean().optional().nullable(),
  crossfade_duration: z.number().optional().nullable(),
  enable_autoplay: z.boolean().optional().nullable(),
  enable_crossfade: z.boolean().optional().nullable(),
  enable_equalizer: z.boolean().optional().nullable(),
  enable_explicit_content: z.boolean().optional().nullable(),
  enable_gapless_playback: z.boolean().optional().nullable(),
  enable_notifications: z.boolean().optional().nullable(),
  equalizer_settings: jsonSchema.optional().nullable(),
  notification_settings: jsonSchema.optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  privacy_level: z.string().optional().nullable(),
  theme: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string(),
  volume_level: z.number().optional().nullable(),
});

export const publicUserSettingsUpdateSchemaSchema = z.object({
  audio_quality: z.string().optional().nullable(),
  auto_add_to_library: z.boolean().optional().nullable(),
  crossfade_duration: z.number().optional().nullable(),
  enable_autoplay: z.boolean().optional().nullable(),
  enable_crossfade: z.boolean().optional().nullable(),
  enable_equalizer: z.boolean().optional().nullable(),
  enable_explicit_content: z.boolean().optional().nullable(),
  enable_gapless_playback: z.boolean().optional().nullable(),
  enable_notifications: z.boolean().optional().nullable(),
  equalizer_settings: jsonSchema.optional().nullable(),
  notification_settings: jsonSchema.optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  privacy_level: z.string().optional().nullable(),
  theme: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
  volume_level: z.number().optional().nullable(),
});

export const publicUserSettingsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_settings_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUsersRowSchemaSchema = z.object({
  created_at: z.string(),
  display_name: z.string().nullable(),
  email: z.string(),
  email_verified: z.boolean().nullable(),
  id: z.string(),
  profile_url: z.string().nullable(),
  role: z.string().nullable(),
  updated_at: z.string(),
  username: z.string(),
  wallet_address: z.string().nullable(),
});

export const publicUsersInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  display_name: z.string().optional().nullable(),
  email: z.string(),
  email_verified: z.boolean().optional().nullable(),
  id: z.string(),
  profile_url: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  username: z.string(),
  wallet_address: z.string().optional().nullable(),
});

export const publicUsersUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  display_name: z.string().optional().nullable(),
  email: z.string().optional(),
  email_verified: z.boolean().optional().nullable(),
  id: z.string().optional(),
  profile_url: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  username: z.string().optional(),
  wallet_address: z.string().optional().nullable(),
});

export const publicAlbumPlayCountsRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  last_played_at: z.string().nullable(),
  play_count: z.number().nullable(),
  tracks_played: z.number().nullable(),
  unique_listeners: z.number().nullable(),
});

export const publicAlbumPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicArtistPlayCountsRowSchemaSchema = z.object({
  artist_id: z.string().nullable(),
  last_played_at: z.string().nullable(),
  play_count: z.number().nullable(),
  tracks_played: z.number().nullable(),
  unique_listeners: z.number().nullable(),
});

export const publicArtistPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTrackPlayCountsRowSchemaSchema = z.object({
  last_played_at: z.string().nullable(),
  play_count: z.number().nullable(),
  track_id: z.string().nullable(),
  unique_listeners: z.number().nullable(),
});

export const publicTrackPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("play_history_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("play_history_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks_with_details"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicTracksWithDetailsRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  album_release_date: z.string().nullable(),
  album_title: z.string().nullable(),
  artist_id: z.string().nullable(),
  artist_name: z.string().nullable(),
  artist_verified: z.boolean().nullable(),
  audio_url: z.string().nullable(),
  cover_url: z.string().nullable(),
  created_at: z.string().nullable(),
  duration: z.number().nullable(),
  explicit: z.boolean().nullable(),
  genre: z.array(z.string()).nullable(),
  id: z.string().nullable(),
  isrc: z.string().nullable(),
  lyrics: z.string().nullable(),
  play_count: z.number().nullable(),
  release_date: z.string().nullable(),
  title: z.string().nullable(),
  track_number: z.number().nullable(),
  unique_listeners: z.number().nullable(),
  updated_at: z.string().nullable(),
});

export const publicTracksWithDetailsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("tracks_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicAddAlbumToLibraryArgsSchemaSchema = z.object({
  album_id: z.string(),
});

export const publicAddAlbumToLibraryReturnsSchemaSchema = z.boolean();

export const publicAddTrackToLibraryArgsSchemaSchema = z.object({
  track_id: z.string(),
});

export const publicAddTrackToLibraryReturnsSchemaSchema = z.boolean();

export const publicAddTrackToPlaylistArgsSchemaSchema = z.object({
  playlist_id: z.string(),
  track_id: z.string(),
});

export const publicAddTrackToPlaylistReturnsSchemaSchema = z.undefined();

export const publicApplyForArtistAccountArgsSchemaSchema = z.object({
  artist_name: z.string(),
  bio: z.string().optional(),
  genre: z.array(z.string()).optional(),
  location: z.string().optional(),
  website: z.string().optional(),
  social_links: jsonSchema.optional(),
  application_notes: z.string().optional(),
});

export const publicApplyForArtistAccountReturnsSchemaSchema = jsonSchema;

export const publicApproveArtistApplicationArgsSchemaSchema = z.object({
  artist_id: z.string(),
  approved: z.boolean(),
  admin_notes: z.string().optional(),
});

export const publicApproveArtistApplicationReturnsSchemaSchema = jsonSchema;

export const publicCreatePlaylistArgsSchemaSchema = z.object({
  name: z.string(),
  description: z.string().optional(),
  is_public: z.boolean().optional(),
});

export const publicCreatePlaylistReturnsSchemaSchema = z.object({
  cover_url: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const publicCreateTrackArgsSchemaSchema = z.object({
  title: z.string(),
  duration: z.number(),
  audio_url: z.string(),
  album_id: z.string().optional(),
  cover_url: z.string().optional(),
  track_number: z.number().optional(),
  lyrics: z.string().optional(),
  genre: z.array(z.string()).optional(),
  explicit: z.boolean().optional(),
  release_date: z.string().optional(),
  isrc: z.string().optional(),
});

export const publicCreateTrackReturnsSchemaSchema = z.object({
  album_id: z.string().nullable(),
  artist_id: z.string(),
  audio_url: z.string(),
  cover_url: z.string().nullable(),
  created_at: z.string(),
  duration: z.number(),
  explicit: z.boolean().nullable(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  isrc: z.string().nullable(),
  lyrics: z.string().nullable(),
  release_date: z.string().nullable(),
  title: z.string(),
  track_number: z.number().nullable(),
  updated_at: z.string(),
});

export const publicGetAlbumsByGenreArgsSchemaSchema = z.object({
  p_genre_id: z.string(),
  p_limit: z.number().optional(),
  p_offset: z.number().optional(),
});

export const publicGetAlbumsByGenreReturnsSchemaSchema = z.array(
  z.object({
    artist_id: z.string(),
    cover_url: z.string().nullable(),
    created_at: z.string(),
    description: z.string().nullable(),
    genre: z.array(z.string()).nullable(),
    id: z.string(),
    release_date: z.string().nullable(),
    title: z.string(),
    type: z.string().nullable(),
    updated_at: z.string(),
  }),
);

export const publicGetArtistPaymentStatsArgsSchemaSchema = z.object({
  time_period: z.string().optional(),
});

export const publicGetArtistPaymentStatsReturnsSchemaSchema = z.array(
  z.object({
    total_payments: z.number(),
    total_amount: z.number(),
    avg_amount: z.number(),
    payment_type: z.string(),
    period: z.string(),
  }),
);

export const publicGetArtistsByGenreArgsSchemaSchema = z.object({
  p_genre_id: z.string(),
  p_limit: z.number().optional(),
  p_offset: z.number().optional(),
});

export const publicGetArtistsByGenreReturnsSchemaSchema = z.array(
  z.object({
    application_date: z.string().nullable(),
    application_notes: z.string().nullable(),
    approved: z.boolean().nullable(),
    artist_name: z.string(),
    bio: z.string().nullable(),
    created_at: z.string(),
    genre: z.array(z.string()).nullable(),
    id: z.string(),
    location: z.string().nullable(),
    social_links: jsonSchema.nullable(),
    updated_at: z.string(),
    verified: z.boolean().nullable(),
    website: z.string().nullable(),
  }),
);

export const publicGetMonthlyPaymentTrendsArgsSchemaSchema = z.object({
  months_back: z.number().optional(),
});

export const publicGetMonthlyPaymentTrendsReturnsSchemaSchema = z.array(
  z.object({
    month: z.string(),
    total_amount: z.number(),
    payment_count: z.number(),
  }),
);

export const publicGetPopularGenresArgsSchemaSchema = z.object({
  p_start_date: z.string(),
  p_end_date: z.string(),
  p_limit: z.number().optional(),
});

export const publicGetPopularGenresReturnsSchemaSchema = z.array(
  z.object({
    color: z.string().nullable(),
    created_at: z.string(),
    description: z.string().nullable(),
    id: z.string(),
    image_url: z.string().nullable(),
    name: z.string(),
    popularity: z.number().nullable(),
    slug: z.string().nullable(),
    updated_at: z.string(),
  }),
);

export const publicGetRelatedGenresArgsSchemaSchema = z.object({
  p_genre_id: z.string(),
  p_limit: z.number().optional(),
});

export const publicGetRelatedGenresReturnsSchemaSchema = z.array(
  z.object({
    color: z.string().nullable(),
    created_at: z.string(),
    description: z.string().nullable(),
    id: z.string(),
    image_url: z.string().nullable(),
    name: z.string(),
    popularity: z.number().nullable(),
    slug: z.string().nullable(),
    updated_at: z.string(),
  }),
);

export const publicGetTracksByGenreArgsSchemaSchema = z.object({
  p_genre_id: z.string(),
  p_limit: z.number().optional(),
  p_offset: z.number().optional(),
});

export const publicGetTracksByGenreReturnsSchemaSchema = z.array(
  z.object({
    album_id: z.string().nullable(),
    artist_id: z.string(),
    audio_url: z.string(),
    cover_url: z.string().nullable(),
    created_at: z.string(),
    duration: z.number(),
    explicit: z.boolean().nullable(),
    genre: z.array(z.string()).nullable(),
    id: z.string(),
    isrc: z.string().nullable(),
    lyrics: z.string().nullable(),
    release_date: z.string().nullable(),
    title: z.string(),
    track_number: z.number().nullable(),
    updated_at: z.string(),
  }),
);

export const publicRecordPlayArgsSchemaSchema = z.object({
  track_id: z.string(),
  play_duration: z.number().optional(),
  completed: z.boolean().optional(),
  source: z.string().optional(),
  context_id: z.string().optional(),
});

export const publicRecordPlayReturnsSchemaSchema = z.undefined();

export const publicTipArtistArgsSchemaSchema = z.object({
  artist_id: z.string(),
  amount: z.number(),
  transaction_hash: z.string(),
  track_id: z.string().optional(),
  album_id: z.string().optional(),
  message: z.string().optional(),
});

export const publicTipArtistReturnsSchemaSchema = z.object({
  album_id: z.string().nullable(),
  amount: z.number(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  message: z.string().nullable(),
  payment_type: z.string(),
  recipient_id: z.string(),
  sender_id: z.string(),
  status: z.string(),
  track_id: z.string().nullable(),
  transaction_hash: z.string().nullable(),
  updated_at: z.string(),
});

export const publicUpdateGenrePopularityArgsSchemaSchema = z.object({});

export const publicUpdateGenrePopularityReturnsSchemaSchema = z.undefined();
