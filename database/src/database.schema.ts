/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./types/database";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const prettygoodAlbumLikesRowSchemaSchema = z.object({
  album_id: z.string(),
  liked_at: z.string(),
  user_id: z.string(),
});

export const prettygoodAlbumLikesInsertSchemaSchema = z.object({
  album_id: z.string(),
  liked_at: z.string().optional(),
  user_id: z.string(),
});

export const prettygoodAlbumLikesUpdateSchemaSchema = z.object({
  album_id: z.string().optional(),
  liked_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodAlbumLikesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("album_likes_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("album_likes_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodAlbumsRowSchemaSchema = z.object({
  artist_id: z.string(),
  cover_url: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  release_date: z.string().nullable(),
  title: z.string(),
  type: z.string().nullable(),
  updated_at: z.string(),
});

export const prettygoodAlbumsInsertSchemaSchema = z.object({
  artist_id: z.string(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  release_date: z.string().optional().nullable(),
  title: z.string(),
  type: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const prettygoodAlbumsUpdateSchemaSchema = z.object({
  artist_id: z.string().optional(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  release_date: z.string().optional().nullable(),
  title: z.string().optional(),
  type: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const prettygoodAlbumsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("albums_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodArtistFollowersRowSchemaSchema = z.object({
  artist_id: z.string(),
  followed_at: z.string(),
  user_id: z.string(),
});

export const prettygoodArtistFollowersInsertSchemaSchema = z.object({
  artist_id: z.string(),
  followed_at: z.string().optional(),
  user_id: z.string(),
});

export const prettygoodArtistFollowersUpdateSchemaSchema = z.object({
  artist_id: z.string().optional(),
  followed_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodArtistFollowersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("artist_followers_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("artist_followers_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodArtistsRowSchemaSchema = z.object({
  artist_name: z.string(),
  bio: z.string().nullable(),
  created_at: z.string(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  location: z.string().nullable(),
  social_links: jsonSchema.nullable(),
  updated_at: z.string(),
  verified: z.boolean().nullable(),
  website: z.string().nullable(),
});

export const prettygoodArtistsInsertSchemaSchema = z.object({
  artist_name: z.string(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string(),
  location: z.string().optional().nullable(),
  social_links: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
  verified: z.boolean().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const prettygoodArtistsUpdateSchemaSchema = z.object({
  artist_name: z.string().optional(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  genre: z.array(z.string()).optional().nullable(),
  id: z.string().optional(),
  location: z.string().optional().nullable(),
  social_links: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
  verified: z.boolean().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const prettygoodArtistsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("artists_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodPaymentsRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  amount: z.number(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  message: z.string().nullable(),
  payment_type: z.string(),
  recipient_id: z.string(),
  sender_id: z.string(),
  status: z.string(),
  track_id: z.string().nullable(),
  transaction_hash: z.string().nullable(),
  updated_at: z.string(),
});

export const prettygoodPaymentsInsertSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  amount: z.number(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  message: z.string().optional().nullable(),
  payment_type: z.string(),
  recipient_id: z.string(),
  sender_id: z.string(),
  status: z.string(),
  track_id: z.string().optional().nullable(),
  transaction_hash: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const prettygoodPaymentsUpdateSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  amount: z.number().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  message: z.string().optional().nullable(),
  payment_type: z.string().optional(),
  recipient_id: z.string().optional(),
  sender_id: z.string().optional(),
  status: z.string().optional(),
  track_id: z.string().optional().nullable(),
  transaction_hash: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const prettygoodPaymentsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("payments_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_recipient_id_fkey"),
    columns: z.tuple([z.literal("recipient_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_sender_id_fkey"),
    columns: z.tuple([z.literal("sender_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodPlayHistoryRowSchemaSchema = z.object({
  client_ip: z.string().nullable(),
  completed: z.boolean().nullable(),
  id: z.string(),
  play_duration: z.number().nullable(),
  played_at: z.string(),
  source: z.string().nullable(),
  track_id: z.string(),
  user_agent: z.string().nullable(),
  user_id: z.string(),
});

export const prettygoodPlayHistoryInsertSchemaSchema = z.object({
  client_ip: z.string().optional().nullable(),
  completed: z.boolean().optional().nullable(),
  id: z.string().optional(),
  play_duration: z.number().optional().nullable(),
  played_at: z.string().optional(),
  source: z.string().optional().nullable(),
  track_id: z.string(),
  user_agent: z.string().optional().nullable(),
  user_id: z.string(),
});

export const prettygoodPlayHistoryUpdateSchemaSchema = z.object({
  client_ip: z.string().optional().nullable(),
  completed: z.boolean().optional().nullable(),
  id: z.string().optional(),
  play_duration: z.number().optional().nullable(),
  played_at: z.string().optional(),
  source: z.string().optional().nullable(),
  track_id: z.string().optional(),
  user_agent: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const prettygoodPlayHistoryRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("play_history_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("play_history_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodPlaylistCollaboratorsRowSchemaSchema = z.object({
  added_at: z.string(),
  added_by: z.string(),
  playlist_id: z.string(),
  user_id: z.string(),
});

export const prettygoodPlaylistCollaboratorsInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  added_by: z.string(),
  playlist_id: z.string(),
  user_id: z.string(),
});

export const prettygoodPlaylistCollaboratorsUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  added_by: z.string().optional(),
  playlist_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodPlaylistCollaboratorsRelationshipsSchemaSchema = z.tuple(
  [
    z.object({
      foreignKeyName: z.literal("playlist_collaborators_added_by_fkey"),
      columns: z.tuple([z.literal("added_by")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("users"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
    z.object({
      foreignKeyName: z.literal("playlist_collaborators_playlist_id_fkey"),
      columns: z.tuple([z.literal("playlist_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("playlists"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
    z.object({
      foreignKeyName: z.literal("playlist_collaborators_user_id_fkey"),
      columns: z.tuple([z.literal("user_id")]),
      isOneToOne: z.literal(false),
      referencedRelation: z.literal("users"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ],
);

export const prettygoodPlaylistLikesRowSchemaSchema = z.object({
  liked_at: z.string(),
  playlist_id: z.string(),
  user_id: z.string(),
});

export const prettygoodPlaylistLikesInsertSchemaSchema = z.object({
  liked_at: z.string().optional(),
  playlist_id: z.string(),
  user_id: z.string(),
});

export const prettygoodPlaylistLikesUpdateSchemaSchema = z.object({
  liked_at: z.string().optional(),
  playlist_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodPlaylistLikesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("playlist_likes_playlist_id_fkey"),
    columns: z.tuple([z.literal("playlist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("playlists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_likes_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodPlaylistTracksRowSchemaSchema = z.object({
  added_at: z.string(),
  added_by: z.string(),
  playlist_id: z.string(),
  position: z.number(),
  track_id: z.string(),
});

export const prettygoodPlaylistTracksInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  added_by: z.string(),
  playlist_id: z.string(),
  position: z.number(),
  track_id: z.string(),
});

export const prettygoodPlaylistTracksUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  added_by: z.string().optional(),
  playlist_id: z.string().optional(),
  position: z.number().optional(),
  track_id: z.string().optional(),
});

export const prettygoodPlaylistTracksRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("playlist_tracks_added_by_fkey"),
    columns: z.tuple([z.literal("added_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_tracks_playlist_id_fkey"),
    columns: z.tuple([z.literal("playlist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("playlists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("playlist_tracks_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodPlaylistsRowSchemaSchema = z.object({
  cover_url: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const prettygoodPlaylistsInsertSchemaSchema = z.object({
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  name: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const prettygoodPlaylistsUpdateSchemaSchema = z.object({
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodPlaylistsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("playlists_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodSearchHistoryRowSchemaSchema = z.object({
  id: z.string(),
  query: z.string(),
  searched_at: z.string(),
  user_id: z.string(),
});

export const prettygoodSearchHistoryInsertSchemaSchema = z.object({
  id: z.string().optional(),
  query: z.string(),
  searched_at: z.string().optional(),
  user_id: z.string(),
});

export const prettygoodSearchHistoryUpdateSchemaSchema = z.object({
  id: z.string().optional(),
  query: z.string().optional(),
  searched_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodSearchHistoryRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("search_history_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodTrackLikesRowSchemaSchema = z.object({
  liked_at: z.string(),
  track_id: z.string(),
  user_id: z.string(),
});

export const prettygoodTrackLikesInsertSchemaSchema = z.object({
  liked_at: z.string().optional(),
  track_id: z.string(),
  user_id: z.string(),
});

export const prettygoodTrackLikesUpdateSchemaSchema = z.object({
  liked_at: z.string().optional(),
  track_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodTrackLikesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("track_likes_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("track_likes_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodTracksRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  artist_id: z.string(),
  audio_url: z.string(),
  cover_url: z.string().nullable(),
  created_at: z.string(),
  duration: z.number(),
  explicit: z.boolean().nullable(),
  genre: z.array(z.string()),
  id: z.string(),
  isrc: z.string().nullable(),
  lyrics: z.string().nullable(),
  release_date: z.string().nullable(),
  title: z.string(),
  track_number: z.number().nullable(),
  updated_at: z.string(),
});

export const prettygoodTracksInsertSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  artist_id: z.string(),
  audio_url: z.string(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  duration: z.number(),
  explicit: z.boolean().optional().nullable(),
  genre: z.array(z.string()).optional(),
  id: z.string().optional(),
  isrc: z.string().optional().nullable(),
  lyrics: z.string().optional().nullable(),
  release_date: z.string().optional().nullable(),
  title: z.string(),
  track_number: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const prettygoodTracksUpdateSchemaSchema = z.object({
  album_id: z.string().optional().nullable(),
  artist_id: z.string().optional(),
  audio_url: z.string().optional(),
  cover_url: z.string().optional().nullable(),
  created_at: z.string().optional(),
  duration: z.number().optional(),
  explicit: z.boolean().optional().nullable(),
  genre: z.array(z.string()).optional(),
  id: z.string().optional(),
  isrc: z.string().optional().nullable(),
  lyrics: z.string().optional().nullable(),
  release_date: z.string().optional().nullable(),
  title: z.string().optional(),
  track_number: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const prettygoodTracksRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("tracks_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUserLibraryAlbumsRowSchemaSchema = z.object({
  added_at: z.string(),
  album_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserLibraryAlbumsInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  album_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserLibraryAlbumsUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  album_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodUserLibraryAlbumsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_library_albums_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_library_albums_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUserLibraryArtistsRowSchemaSchema = z.object({
  added_at: z.string(),
  artist_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserLibraryArtistsInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  artist_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserLibraryArtistsUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  artist_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodUserLibraryArtistsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_library_artists_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_library_artists_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUserLibraryTracksRowSchemaSchema = z.object({
  added_at: z.string(),
  track_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserLibraryTracksInsertSchemaSchema = z.object({
  added_at: z.string().optional(),
  track_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserLibraryTracksUpdateSchemaSchema = z.object({
  added_at: z.string().optional(),
  track_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodUserLibraryTracksRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_library_tracks_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_library_tracks_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUserRecentlyPlayedRowSchemaSchema = z.object({
  context_id: z.string().nullable(),
  context_type: z.string().nullable(),
  id: z.string(),
  played_at: z.string(),
  track_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserRecentlyPlayedInsertSchemaSchema = z.object({
  context_id: z.string().optional().nullable(),
  context_type: z.string().optional().nullable(),
  id: z.string().optional(),
  played_at: z.string().optional(),
  track_id: z.string(),
  user_id: z.string(),
});

export const prettygoodUserRecentlyPlayedUpdateSchemaSchema = z.object({
  context_id: z.string().optional().nullable(),
  context_type: z.string().optional().nullable(),
  id: z.string().optional(),
  played_at: z.string().optional(),
  track_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const prettygoodUserRecentlyPlayedRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_recently_played_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_recently_played_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUserSettingsRowSchemaSchema = z.object({
  audio_quality: z.string().nullable(),
  auto_add_to_library: z.boolean().nullable(),
  crossfade_duration: z.number().nullable(),
  enable_autoplay: z.boolean().nullable(),
  enable_crossfade: z.boolean().nullable(),
  enable_equalizer: z.boolean().nullable(),
  enable_explicit_content: z.boolean().nullable(),
  enable_gapless_playback: z.boolean().nullable(),
  enable_notifications: z.boolean().nullable(),
  equalizer_settings: jsonSchema.nullable(),
  notification_settings: jsonSchema.nullable(),
  preferred_language: z.string().nullable(),
  privacy_level: z.string().nullable(),
  theme: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string(),
  volume_level: z.number().nullable(),
});

export const prettygoodUserSettingsInsertSchemaSchema = z.object({
  audio_quality: z.string().optional().nullable(),
  auto_add_to_library: z.boolean().optional().nullable(),
  crossfade_duration: z.number().optional().nullable(),
  enable_autoplay: z.boolean().optional().nullable(),
  enable_crossfade: z.boolean().optional().nullable(),
  enable_equalizer: z.boolean().optional().nullable(),
  enable_explicit_content: z.boolean().optional().nullable(),
  enable_gapless_playback: z.boolean().optional().nullable(),
  enable_notifications: z.boolean().optional().nullable(),
  equalizer_settings: jsonSchema.optional().nullable(),
  notification_settings: jsonSchema.optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  privacy_level: z.string().optional().nullable(),
  theme: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string(),
  volume_level: z.number().optional().nullable(),
});

export const prettygoodUserSettingsUpdateSchemaSchema = z.object({
  audio_quality: z.string().optional().nullable(),
  auto_add_to_library: z.boolean().optional().nullable(),
  crossfade_duration: z.number().optional().nullable(),
  enable_autoplay: z.boolean().optional().nullable(),
  enable_crossfade: z.boolean().optional().nullable(),
  enable_equalizer: z.boolean().optional().nullable(),
  enable_explicit_content: z.boolean().optional().nullable(),
  enable_gapless_playback: z.boolean().optional().nullable(),
  enable_notifications: z.boolean().optional().nullable(),
  equalizer_settings: jsonSchema.optional().nullable(),
  notification_settings: jsonSchema.optional().nullable(),
  preferred_language: z.string().optional().nullable(),
  privacy_level: z.string().optional().nullable(),
  theme: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
  volume_level: z.number().optional().nullable(),
});

export const prettygoodUserSettingsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_settings_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUsersRowSchemaSchema = z.object({
  created_at: z.string(),
  display_name: z.string().nullable(),
  email: z.string(),
  email_verified: z.boolean().nullable(),
  id: z.string(),
  profile_url: z.string().nullable(),
  updated_at: z.string(),
  username: z.string(),
  wallet_address: z.string().nullable(),
});

export const prettygoodUsersInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  display_name: z.string().optional().nullable(),
  email: z.string(),
  email_verified: z.boolean().optional().nullable(),
  id: z.string().optional(),
  profile_url: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  username: z.string(),
  wallet_address: z.string().optional().nullable(),
});

export const prettygoodUsersUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  display_name: z.string().optional().nullable(),
  email: z.string().optional(),
  email_verified: z.boolean().optional().nullable(),
  id: z.string().optional(),
  profile_url: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  username: z.string().optional(),
  wallet_address: z.string().optional().nullable(),
});

export const prettygoodAlbumPlayCountsRowSchemaSchema = z.object({
  album_id: z.string().nullable(),
  play_count: z.number().nullable(),
});

export const prettygoodAlbumPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_album_id_fkey"),
    columns: z.tuple([z.literal("album_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("albums"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodArtistPlayCountsRowSchemaSchema = z.object({
  artist_id: z.string().nullable(),
  play_count: z.number().nullable(),
});

export const prettygoodArtistPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("tracks_artist_id_fkey"),
    columns: z.tuple([z.literal("artist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("artists"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodTrackPlayCountsRowSchemaSchema = z.object({
  play_count: z.number().nullable(),
  track_id: z.string().nullable(),
});

export const prettygoodTrackPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("play_history_track_id_fkey"),
    columns: z.tuple([z.literal("track_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tracks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodUserPlayCountsRowSchemaSchema = z.object({
  play_count: z.number().nullable(),
  user_id: z.string().nullable(),
});

export const prettygoodUserPlayCountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("play_history_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const prettygoodAddAlbumToLibraryArgsSchemaSchema = z.object({
  album_id: z.string(),
});

export const prettygoodAddAlbumToLibraryReturnsSchemaSchema = z.boolean();

export const prettygoodAddArtistToLibraryArgsSchemaSchema = z.object({
  artist_id: z.string(),
});

export const prettygoodAddArtistToLibraryReturnsSchemaSchema = z.boolean();

export const prettygoodAddTrackToLibraryArgsSchemaSchema = z.object({
  track_id: z.string(),
});

export const prettygoodAddTrackToLibraryReturnsSchemaSchema = z.boolean();

export const prettygoodAddTrackToPlaylistArgsSchemaSchema = z.object({
  playlist_id: z.string(),
  track_id: z.string(),
});

export const prettygoodAddTrackToPlaylistReturnsSchemaSchema = z.undefined();

export const prettygoodAuthenticateUserArgsSchemaSchema = z.object({
  email_or_username: z.string(),
  password: z.string(),
});

export const prettygoodAuthenticateUserReturnsSchemaSchema = z.string();

export const prettygoodAuthenticateWalletArgsSchemaSchema = z.object({
  wallet_address: z.string(),
  signature: z.string(),
});

export const prettygoodAuthenticateWalletReturnsSchemaSchema = z.string();

export const prettygoodCreateEmailVerificationTokenArgsSchemaSchema = z.object({
  user_id: z.string(),
});

export const prettygoodCreateEmailVerificationTokenReturnsSchemaSchema =
  z.string();

export const prettygoodCreatePlaylistArgsSchemaSchema = z.object({
  name: z.string(),
  description: z.string().optional(),
  is_public: z.boolean().optional(),
});

export const prettygoodCreatePlaylistReturnsSchemaSchema = z.object({
  cover_url: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const prettygoodGenerateNonceArgsSchemaSchema = z.object({
  wallet_address: z.string(),
});

export const prettygoodGenerateNonceReturnsSchemaSchema = z.string();

export const prettygoodGetAlbumPlayCountArgsSchemaSchema = z.object({
  album_id: z.string(),
});

export const prettygoodGetAlbumPlayCountReturnsSchemaSchema = z.number();

export const prettygoodGetArtistPaymentStatsArgsSchemaSchema = z.object({
  artist_id: z.string(),
});

export const prettygoodGetArtistPaymentStatsReturnsSchemaSchema = z.array(
  z.object({
    total_payments: z.number(),
    total_amount: z.number(),
    avg_amount: z.number(),
    payment_type: z.string(),
    month_year: z.string(),
  }),
);

export const prettygoodGetArtistPlayCountArgsSchemaSchema = z.object({
  artist_id: z.string(),
});

export const prettygoodGetArtistPlayCountReturnsSchemaSchema = z.number();

export const prettygoodGetRecommendationsArgsSchemaSchema = z.object({
  limit_count: z.number().optional(),
});

export const prettygoodGetRecommendationsReturnsSchemaSchema = z.array(
  z.object({
    album_id: z.string().nullable(),
    artist_id: z.string(),
    audio_url: z.string(),
    cover_url: z.string().nullable(),
    created_at: z.string(),
    duration: z.number(),
    explicit: z.boolean().nullable(),
    genre: z.array(z.string()),
    id: z.string(),
    isrc: z.string().nullable(),
    lyrics: z.string().nullable(),
    release_date: z.string().nullable(),
    title: z.string(),
    track_number: z.number().nullable(),
    updated_at: z.string(),
  }),
);

export const prettygoodGetTrackPlayCountArgsSchemaSchema = z.object({
  track_id: z.string(),
});

export const prettygoodGetTrackPlayCountReturnsSchemaSchema = z.number();

export const prettygoodGetTrackPlayCountByPeriodArgsSchemaSchema = z.object({
  track_id: z.string(),
  start_date: z.string(),
  end_date: z.string(),
});

export const prettygoodGetTrackPlayCountByPeriodReturnsSchemaSchema =
  z.number();

export const prettygoodRecordPlayArgsSchemaSchema = z.object({
  track_id: z.string(),
  play_duration: z.number().optional(),
  completed: z.boolean().optional(),
  source: z.string().optional(),
  context_id: z.string().optional(),
});

export const prettygoodRecordPlayReturnsSchemaSchema = z.undefined();

export const prettygoodRecordSearchArgsSchemaSchema = z.object({
  query: z.string(),
});

export const prettygoodRecordSearchReturnsSchemaSchema = z.undefined();

export const prettygoodRefreshTokenArgsSchemaSchema = z.object({});

export const prettygoodRefreshTokenReturnsSchemaSchema = z.string();

export const prettygoodRegisterAsArtistArgsSchemaSchema = z.object({
  artist_name: z.string(),
  bio: z.string().optional(),
  genre: z.array(z.string()).optional(),
  location: z.string().optional(),
  website: z.string().optional(),
  social_links: jsonSchema.optional(),
});

export const prettygoodRegisterAsArtistReturnsSchemaSchema = z.object({
  artist_name: z.string(),
  bio: z.string().nullable(),
  created_at: z.string(),
  genre: z.array(z.string()).nullable(),
  id: z.string(),
  location: z.string().nullable(),
  social_links: jsonSchema.nullable(),
  updated_at: z.string(),
  verified: z.boolean().nullable(),
  website: z.string().nullable(),
});

export const prettygoodRequestPasswordResetArgsSchemaSchema = z.object({
  email: z.string(),
});

export const prettygoodRequestPasswordResetReturnsSchemaSchema = z.string();

export const prettygoodResetPasswordArgsSchemaSchema = z.object({
  reset_token: z.string(),
  new_password: z.string(),
});

export const prettygoodResetPasswordReturnsSchemaSchema = z.boolean();

export const prettygoodTipArtistArgsSchemaSchema = z.object({
  artist_id: z.string(),
  amount: z.number(),
  transaction_hash: z.string(),
  track_id: z.string().optional(),
  album_id: z.string().optional(),
  message: z.string().optional(),
});

export const prettygoodTipArtistReturnsSchemaSchema = z.object({
  album_id: z.string().nullable(),
  amount: z.number(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  message: z.string().nullable(),
  payment_type: z.string(),
  recipient_id: z.string(),
  sender_id: z.string(),
  status: z.string(),
  track_id: z.string().nullable(),
  transaction_hash: z.string().nullable(),
  updated_at: z.string(),
});

export const prettygoodVerifyEmailArgsSchemaSchema = z.object({
  verification_token: z.string(),
});

export const prettygoodVerifyEmailReturnsSchemaSchema = z.boolean();

export const prettygoodVerifySignatureArgsSchemaSchema = z.object({
  wallet_address: z.string(),
  signature: z.string(),
});

export const prettygoodVerifySignatureReturnsSchemaSchema = z.string();
